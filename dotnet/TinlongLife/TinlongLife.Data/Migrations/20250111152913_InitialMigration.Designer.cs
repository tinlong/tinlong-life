// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TinlongLife.Data;

#nullable disable

namespace TinlongLife.Data.Migrations
{
    [DbContext(typeof(TinlongLifeDbContext))]
    [Migration("20250111152913_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TinlongLife.Domain.Models.BillingDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("BillingStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<DateTime>("NextBillingDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PolicyId")
                        .IsUnique();

                    b.ToTable("BillingDetails");

                    b.HasDiscriminator().HasValue("BillingDetail");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TinlongLife.Domain.Models.Policy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("PolicyNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Policies");

                    b.HasDiscriminator().HasValue("Policy");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TinlongLife.Domain.Models.PolicyDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContractState")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<decimal>("FaceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PolicyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PolicyId")
                        .IsUnique();

                    b.ToTable("PolicyDetails");

                    b.HasDiscriminator().HasValue("PolicyDetail");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TinlongLife.Domain.Models.LifeBillingDetail", b =>
                {
                    b.HasBaseType("TinlongLife.Domain.Models.BillingDetail");

                    b.HasDiscriminator().HasValue("LifeBillingDetail");
                });

            modelBuilder.Entity("TinlongLife.Domain.Models.LifePolicy", b =>
                {
                    b.HasBaseType("TinlongLife.Domain.Models.Policy");

                    b.HasDiscriminator().HasValue("LifePolicy");
                });

            modelBuilder.Entity("TinlongLife.Domain.Models.LifePolicyDetail", b =>
                {
                    b.HasBaseType("TinlongLife.Domain.Models.PolicyDetail");

                    b.HasDiscriminator().HasValue("LifePolicyDetail");
                });

            modelBuilder.Entity("TinlongLife.Domain.Models.BillingDetail", b =>
                {
                    b.HasOne("TinlongLife.Domain.Models.Policy", "Policy")
                        .WithOne("BillingDetail")
                        .HasForeignKey("TinlongLife.Domain.Models.BillingDetail", "PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("TinlongLife.Domain.Models.PolicyDetail", b =>
                {
                    b.HasOne("TinlongLife.Domain.Models.Policy", "Policy")
                        .WithOne("PolicyDetail")
                        .HasForeignKey("TinlongLife.Domain.Models.PolicyDetail", "PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("TinlongLife.Domain.Models.Policy", b =>
                {
                    b.Navigation("BillingDetail")
                        .IsRequired();

                    b.Navigation("PolicyDetail")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
